#!/usr/bin/env ruby
# encoding: UTF-8

require 'optparse'

COMMANDS = %w[start stop restart init bcrypt cert ldap schema]

def parse(args)
  options = {}
  parser = OptionParser.new do |opts|
    opts.banner = "Usage: vines [options] #{COMMANDS.join('|')}"

    opts.separator ""
    opts.separator "Daemon options:"

    opts.on('-d', '--daemonize', 'Run daemonized in the background') do |daemonize|
      options[:daemonize] = daemonize
    end

    options[:config] = 'config/config.rb'
    opts.on('-c', '--config FILE', "Path to configration file (default: config/config.rb)") do |config|
      options[:config] = config
    end

    options[:log] = 'log/vines.log'
    opts.on('-l', '--log FILE', 'File to redirect output (default: log/vines.log)') do |log|
      options[:log] = log
    end

    options[:pid] = 'tmp/pids/vines.pid'
    opts.on('-P', '--pid FILE', 'File to store PID (default: pid/vines.pid)') do |pid|
      options[:pid] = pid
    end

    opts.separator ""
    opts.separator "Common options:"

    opts.on('-h', '--help', 'Show this message') do |help|
      options[:help] = help
    end

    opts.on('-v', '--version', 'Show version') do |version|
      options[:version] = version
    end
  end

  begin
    parser.parse!(args)
  rescue
    puts parser
    exit(1)
  end

  if options[:version]
    puts Vines::VERSION
    exit
  end

  if options[:help]
    puts parser
    exit
  end

  command = args.shift
  unless COMMANDS.include?(command)
    puts parser
    exit(1)
  end

  options.tap do |opts|
    opts[:args]    = args
    opts[:command] = command
    opts[:config]  = File.expand_path(opts[:config])
    opts[:pid]     = File.expand_path(opts[:pid])
    opts[:log]     = File.expand_path(opts[:log])
  end
end

def check_config(opts)
  return if %w[bcrypt init].include?(opts[:command])
  unless File.exists?(opts[:config])
    puts "No config file found at #{opts[:config]}"
    exit(1)
  end
end

VINES_ROOT = Dir.pwd
opts = parse(ARGV)
check_config(opts)

require "vines"

begin
  command = Vines::Command.const_get(opts[:command].capitalize).new
  command.run(opts)
rescue SystemExit
  # do nothing
rescue Exception => e
  puts e.message
  exit(1)
end
